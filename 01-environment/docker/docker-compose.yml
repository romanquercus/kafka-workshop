# =======================================================================
# Platform Name            kafka-workshop
# Platform Stack:          trivadis/platys-modern-data-platform
# Platform Stack Version:  1.15.0-preview
# =======================================================================
version: '3.5'
networks:
  default:
    name: kafka-workshop
# backward compatiblity to platform < 1.14.0
# enforce some dependencies
# Enable PostgreSQL or MySQL for MLflow server
services:
  #  ================================== InfluxData InfluxDB ========================================== #
  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    hostname: influxdb
    labels:
      com.platys.name: influxdb
      com.platys.restapi.title: InfluxDB Rest API
      com.platys.restapi.url: http://${PUBLIC_IP}:8086
    ports:
      - 8086:8086
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/influxdata/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf
    restart: unless-stopped
  influxdb-ui:
    image: timeseriesadmin/timeseriesadmin:latest
    container_name: influxdb-ui
    hostname: influxdb-ui
    labels:
      com.platys.name: influxdb
      com.platys.webui.title: InfluxDB UI
      com.platys.webui.url: http://${PUBLIC_IP}:28128
    ports:
      - 28128:80
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== InfluxData Chronograf ========================================== #
  chronograf:
    image: chronograf:1.9
    hostname: chronograf
    container_name: chronograf
    labels:
      com.platys.name: chronograf
      com.platys.webui.title: Chronograf UI
      com.platys.webui.url: http://${PUBLIC_IP}:28129
    depends_on:
      - influxdb
    ports:
      - 28129:8888
    environment:
      RESOURCES_PATH: /usr/share/chronograf/resources
      PORT: 8888
      HOST: chronograf
      INFLUXDB_URL: http://influxdb:8086
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== InfluxData Kapacitor ========================================== #
  kapacitor:
    image: kapacitor:1.5
    hostname: kapacitor
    container_name: kapacitor
    labels:
      com.platys.name: kapacitor
      com.platys.restapi.title: Kapacitor REST API
      com.platys.restapi.url: http://${PUBLIC_IP}:28130/kapacitor/v1
    ports:
      - 28130:9092
    environment:
      KAPACITOR_HOSTNAME: kapacitor
      KAPACITOR_DATA_DIR: var/lib/kapacitor
      KAPACITOR_LOGGING_LEVEL: INFO
      KAPACITOR_INFLUXDB_0_URLS_0: http://influxdb:8086
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== InfluxData Telegraf ========================================== #
  telegraf:
    image: telegraf:1.19
    container_name: telegraf
    hostname: telegraf
    labels:
      com.platys.name: telegraf
    environment:
      HOSTNAME: telegraf
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/influxdata/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
      # Mount for Docker API access
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
  #  ================================== PostgreSQL ========================================== #
  postgresql:
    image: postgres:13
    container_name: postgresql
    hostname: postgresql
    labels:
      com.platys.name: postgresql
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=abc123!
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_MULTIPLE_DATABASES=demodb
      - POSTGRES_MULTIPLE_USERS=demo
      - POSTGRES_MULTIPLE_PASSWORDS=abc123!
      - PGDATA=/var/lib/postgresql/data/pgdata
      - DB_SCHEMA=demo
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/postgresql:/docker-entrypoint-initdb.d/
    command:
      - postgres
      - -c
      - wal_level=logical
    restart: unless-stopped
  #  ================================== Adminer ========================================== #
  adminer:
    image: adminer:latest
    container_name: adminer
    hostname: adminer
    labels:
      com.platys.name: adminer
      com.platys.webui.title: Adminer UI
      com.platys.webui.url: http://${PUBLIC_IP}:28131
    ports:
      - 28131:8080
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== Minio ========================================== #
  minio-1:
    image: minio/minio:RELEASE.2022-08-08T18-34-09Z
    container_name: minio-1
    hostname: minio-1
    labels:
      com.platys.name: minio
      com.platys.webui.title: MinIO UI
      com.platys.webui.url: http://${PUBLIC_IP}:9000
    ports:
      - 9000:9000
      - 9010:9010
    environment:
      MINIO_ROOT_USER: V42FCGRVMK24JJ8DHUYG
      MINIO_ROOT_PASSWORD: bKhWxVF3kQoLY9kFmt91l+tDrEoZjqnWXzY9Eza
      MINIO_REGION_NAME: us-east-1
      #MINIO_PUBLIC_IPS: minio-1
      #MINIO_DOMAIN: minio.io
      #MINIO_DEFAULT_BUCKETS: 'admin-bucket,'
    volumes:
      - ./data-transfer:/data-transfer
    command: server /data --console-address ":9010"
    restart: unless-stopped
  #  ================================== Minio MC ========================================== #
  minio-mc:
    image: minio/mc:latest
    container_name: minio-mc
    hostname: minio-mc
    labels:
      com.platys.name: minio
    volumes:
      - ./data-transfer:/data-transfer
#      - ./conf/minio/config.json:/root/.mc/config.json
    entrypoint:
      - /bin/sh
      - -c
      - |
        sleep 10
        mc alias set minio-1 http://minio-1:9000 V42FCGRVMK24JJ8DHUYG bKhWxVF3kQoLY9kFmt91l+tDrEoZjqnWXzY9Eza
        mc mb --ignore-existing minio-1/admin-bucket
           for i in $$(echo "" | sed "s/,/ /g")
        do
          mc mb --ignore-existing minio-1/$$i
        done
        #
        while [ 1 -eq 1 ];do sleep 60;done
    restart: unless-stopped
  #  ================================== Mosquitto ========================================== #
  mosquitto-1:
    image: eclipse-mosquitto:2.0
    hostname: mosquitto-1
    container_name: mosquitto-1
    labels:
      com.platys.name: mosquitto
    ports:
      - 1883:1883
      - 9101:9001
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    restart: unless-stopped
  #  ================================== MQTT UI ========================================== #
  mqtt-ui:
    image: vergissberlin/hivemq-mqtt-web-client:latest
    container_name: mqtt-ui
    hostname: mqtt-ui
    labels:
      com.platys.name: hivemq-ui
      com.platys.webui.title: HiveMQ UI
      com.platys.webui.url: http://${PUBLIC_IP}:28136
    ports:
      - 28136:80
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== Wetty ========================================== #
  wetty:
    image: svenihoney/wetty:latest
    container_name: wetty
    hostname: wetty
    labels:
      com.platys.name: wetty
      com.platys.webui.title: WeTTY UI
      com.platys.webui.url: http://${PUBLIC_IP}:3001
    ports:
      - 3001:3000
    environment:
      - REMOTE_SSH_SERVER=${DOCKER_HOST_IP}
      - REMOTE_SSH_PORT=22
      - REMOTE_SSH_USER=
      - WETTY_PORT=3000
    volumes:
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  #  ================================== markdown-viewer ========================================== #
  markdown-viewer:
    image: trivadis/markdown-web:latest
    container_name: markdown-viewer
    hostname: markdown-viewer
    labels:
      com.platys.name: markdown-viewer
      com.platys.webui.title: Markdown Viewer UI
      com.platys.webui.url: http://${PUBLIC_IP}:80
    ports:
      - 80:80
    volumes:
      - ./artefacts:/home/python/markdown
      - ./data-transfer:/data-transfer
    restart: unless-stopped
  markdown-renderer:
    image: trivadis/jinja2-renderer:latest
    container_name: markdown-renderer
    hostname: markdown-renderer
    labels:
      com.platys.name: markdown-renderer
    environment:
      USE_PUBLIC_IP: 'True'
      PUBLIC_IP: ${PUBLIC_IP}
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      DATAPLATFORM_HOME: ${DATAPLATFORM_HOME}
      PLATYS_PLATFORM_NAME: kafka-workshop
      PLATYS_PLATFORM_STACK: trivadis/platys-modern-data-platform
      PLATYS_PLATFORM_STACK_VERSION: 1.15.0-preview
      PLATYS_COPY_COOKBOOK_DATA: 'True'
    volumes:
      - ./artefacts/templates:/templates
      - ./artefacts/templates:/scripts
      - .:/variables
      - ./artefacts:/output
      - ./data-transfer:/data-transfer
volumes:
  data-transfer-vol:
    name: data_transfer_vol
